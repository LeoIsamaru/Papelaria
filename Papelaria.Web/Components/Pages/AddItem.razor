@* @page "/additem"
@page "/edititem/{Id:int}"
@inject IApiService ApiService
@inject ISnackbar Snackbar
@using Papelaria.Shared
@using MudBlazor
@rendermode InteractiveServer

<MudSnackbarProvider/>
@if(Id > 0)
{
    <h3>Edit Item</h3>
}
else
{ 
    <h3>Add Item</h3>
 }



<EditForm FormName="ItemForm" Model="Item" OnValidSubmit="OnAddItem">
    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Name</label>
        <InputText id="exampleFormControlInput1" class="form-control" placeholder="Name" @bind-Value=Item.Name />
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput2" class="form-label">Description</label>
        <InputText id="exampleFormControlInput2" class="form-control" placeholder="Surname" @bind-Value=Item.Description />
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput3" class="form-label">QtyStock</label>
        <InputText id="exampleFormControlInput3" class="form-control" placeholder="QtyStock" @bind-Value=Item.QtyStock />
    </div>
        <div class="mb-3">
        <label for="exampleFormControlInput4" class="form-label">SellingToConsumerPrice</label>
        <InputText id="exampleFormControlInput4" class="form-control" placeholder="SellingToConsumerPrice" @bind-Value=Item.SellingToConsumerPrice />
    </div>    
    
    <div class="mb-3">
        <label for="exampleFormControlInput5" class="form-label">BuyingFromSupplierPrice</label>
        <InputText id="exampleFormControlInput5" class="form-control" placeholder="BuyingFromSupplierPrice" @bind-Value=Item.BuyingFromSupplierPrice />
    </div>



    @{
        var buttonText = Id > 0 ? "Save" : "Add";}
    <button class="btn btn-primary" type="submit">@buttonText</button>

    <ValidationSummary/>
</EditForm>

@Message


@code{

        [Parameter]
        public int Id { get; set; }

    private Item Item { get; set; } = new();

    private string Message { get; set; } = string.Empty;

    protected override async   Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Id > 0)
            Item = await ApiService.GetItemsAsync(Id);
    }

    private async Task OnAddItem()
    {

        if (Id > 0)
        {
            var response = await ApiService.UpdateItem(Item);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Item atualizado com sucesso!",Severity.Success);
                Item = new();
            }
            else
            {
                Snackbar.Add("Erro ao atualizar o item!", Severity.Error);
            }
        }
        else
        {
            var response = await ApiService.AddItemAsync(Item);
                if (response.IsSuccessStatusCode)
                {
                Snackbar.Add("Item adicionado com sucesso!", Severity.Success);
                Item = new();
                }
                else
                {
                Snackbar.Add("Erro ao adicionar o item!", Severity.Error);
                }
        }

       
    }
} *@