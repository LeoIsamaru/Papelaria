@page "/items"
@using Papelaria.Shared
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Items</h3>

@if (_loading)
{
    <p><em>Carregando itens...</em></p>
}
else if (Items is null)
{
    <p class="text-danger">Erro ao carregar dados.</p>
}
else if (Items.Count == 0)
{
    <p><em>Não há itens na base de dados.</em></p>
}
else
{

    <MudTable Items="Items" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
            <MudTh Style="width: 15%;" Justify="Justify.Center">Name</MudTh>
            <MudTh Style="width: 45%;" Justify="Justify.Center">Description</MudTh>
            <MudTh Style="width: 10%;" Justify="Justify.Center">Qty Stock</MudTh>
            <MudTh Style="width: 10%;" Justify="Justify.Center">Selling Price</MudTh>
            <MudTh Style="width: 10%;" Justify="Justify.Center">Buying Price</MudTh>
            <MudTh Style="width: 10%;" Justify="Justify.Center">Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
            <MudTd Style="width: 15%;" DataLabel="Name" Justify="Justify.Center">@context.Name</MudTd>
            <MudTd Style="width: 45%;" DataLabel="Description" Justify="Justify.Center">@context.Description</MudTd>
            <MudTd Style="width: 10%;" DataLabel="QtyStock" Justify="Justify.Center">@context.QtyStock</MudTd>
            <MudTd Style="width: 10%;" DataLabel="SellingPrice" Justify="Justify.Center">@context.SellingToConsumerPrice</MudTd>
            <MudTd Style="width: 10%;" DataLabel="BuyingPrice" Justify="Justify.Center">@context.BuyingFromSupplierPrice</MudTd>
    <MudTd Style="width: 10%;" DataLabel="Actions">
                <MudBlazor.MudIconButton Icon="@Icons.Material.Filled.Visibility" aria-label="Edit"
                    OnClick="() => OnEditItem(context.Id)">
                </MudBlazor.MudIconButton>
                <MudBlazor.MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="Delete"
                    OnClick="() => OnDeleteItem(context.Id)">
                </MudBlazor.MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}


@code {
    private bool _loading = true;

    private List<Item> Items = new();

    private string Message { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await LoadItems();
            // StateHasChanged();
        }
        catch (Exception)
        {
            Message = "Erro ao receber os items!";
        }
        finally
        {
            _loading = false;
        }

    }

    private void OnEditItem(int id)
    {
        // Exemplo: ir para página de edição
        NavigationManager.NavigateTo($"/edit-item/{id}");
    }


    private async Task LoadItems()
    {
        Items = await ApiService.GetItemsAsync();
        StateHasChanged();
    }

    private async void OnDeleteItem(int id)
    {
        var response = await ApiService.DeleteItemAsync(id);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Item eliminado com sucesso!", Severity.Success);
            await LoadItems();
        }
        else
        {
            Snackbar.Add("Erro ao eliminar o item!", Severity.Error);
            return;
        }

    }


// ===========ALTERAÇOES GRAFICAS A FAZER========
//   -  centrar valores numericos da tabela
//   -  adicionar € nas linhas 
//   - o Justify="Justify.Center" não está a funcionar?
//   -
//   -
//   -
//   -
//   -

}
